// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: goat/bitcoin/v1/tx.proto

package bitcoinv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_NewBlockHashes_FullMethodName      = "/goat.bitcoin.v1.Msg/NewBlockHashes"
	Msg_NewDeposits_FullMethodName         = "/goat.bitcoin.v1.Msg/NewDeposits"
	Msg_NewPubkey_FullMethodName           = "/goat.bitcoin.v1.Msg/NewPubkey"
	Msg_ProcessWithdrawal_FullMethodName   = "/goat.bitcoin.v1.Msg/ProcessWithdrawal"
	Msg_ProcessWithdrawalV2_FullMethodName = "/goat.bitcoin.v1.Msg/ProcessWithdrawalV2"
	Msg_ReplaceWithdrawal_FullMethodName   = "/goat.bitcoin.v1.Msg/ReplaceWithdrawal"
	Msg_ReplaceWithdrawalV2_FullMethodName = "/goat.bitcoin.v1.Msg/ReplaceWithdrawalV2"
	Msg_FinalizeWithdrawal_FullMethodName  = "/goat.bitcoin.v1.Msg/FinalizeWithdrawal"
	Msg_ApproveCancellation_FullMethodName = "/goat.bitcoin.v1.Msg/ApproveCancellation"
	Msg_NewConsolidation_FullMethodName    = "/goat.bitcoin.v1.Msg/NewConsolidation"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Msg defines the Msg service.
type MsgClient interface {
	// NewBlockHashs adds new bitcoin block hashes
	// the block hashes are not only for deposit/withdrawal spv, but also a
	// on-chain oracle for dapps
	// ** it requires off-chain vote by relayer group
	// ** the block should have a hard confirmation number which inconsistent with
	// the param.
	// ** every block after startBlockNumber in the geneis should be submitted on
	// chain
	NewBlockHashes(ctx context.Context, in *MsgNewBlockHashes, opts ...grpc.CallOption) (*MsgNewBlockHashesResponse, error)
	// NewDeposit adds new deposits
	// ** it doesn't need off-chain vote process since we have spv
	NewDeposits(ctx context.Context, in *MsgNewDeposits, opts ...grpc.CallOption) (*MsgNewDepositsResponse, error)
	// NewPubkey adds new deposit public key
	// ** it requires off-chain vote by relayer group
	NewPubkey(ctx context.Context, in *MsgNewPubkey, opts ...grpc.CallOption) (*MsgNewPubkeyResponse, error)
	// ProcessWithdrawal submits a non-signed raw tx and its vote for the
	// withdrawal requests. This is the first step to process withdrawals
	// ** it requires off-chain vote by relayer group
	// ** the output index and withdrawal id list are in one-to-one correspondence
	// ** the tx price should not be larger than withdrawal request
	//
	// It informs every voter that the proposal has been approved and they can
	// process signing then. The most relayer member can construct the final
	// signed transaction and submit the transaction to the bitcoin chain when the
	// signing process is finished Since the signing is an off chain process, so
	// relayer proposer doesn't need to submit the signed transaction to the chain
	ProcessWithdrawal(ctx context.Context, in *MsgProcessWithdrawal, opts ...grpc.CallOption) (*MsgProcessWithdrawalResponse, error)
	// ProcessWithdrawalV2, it's the same as ProcessWithdrawal, but it includes
	// the witness size
	ProcessWithdrawalV2(ctx context.Context, in *MsgProcessWithdrawalV2, opts ...grpc.CallOption) (*MsgProcessWithdrawalV2Response, error)
	// ReplaceWithdrawal replaces a withdrawal by increasing fee
	// ** the output for the withdrawal should be not changed, but you can change
	// the value
	// ** the new tx fee should be larger than before
	// ** it requires off-chain vote by relayer group
	ReplaceWithdrawal(ctx context.Context, in *MsgReplaceWithdrawal, opts ...grpc.CallOption) (*MsgReplaceWithdrawalResponse, error)
	// ReplaceWithdrawalV2, it's the same as ReplaceWithdrawal, but it includes
	// the witness size
	ReplaceWithdrawalV2(ctx context.Context, in *MsgReplaceWithdrawalV2, opts ...grpc.CallOption) (*MsgReplaceWithdrawalV2Response, error)
	// FinalizeWithdrawal finlizes withdrawals and informs the chain to create the
	// withdrawal receipts This is the final step to process withdrawals
	//
	// ** proposer should provide spv to prove the withdarwal is confirmed
	// ** it doesn't need off-chain vote process
	FinalizeWithdrawal(ctx context.Context, in *MsgFinalizeWithdrawal, opts ...grpc.CallOption) (*MsgFinalizeWithdrawalResponse, error)
	// ApproveCancellation approves cancellation requests
	ApproveCancellation(ctx context.Context, in *MsgApproveCancellation, opts ...grpc.CallOption) (*MsgApproveCancellationResponse, error)
	// NewConsolidation initializes a consolidation request to aggregate utxo set
	// ** it requires off-chain vote by relayer group
	NewConsolidation(ctx context.Context, in *MsgNewConsolidation, opts ...grpc.CallOption) (*MsgNewConsolidationResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewBlockHashes(ctx context.Context, in *MsgNewBlockHashes, opts ...grpc.CallOption) (*MsgNewBlockHashesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgNewBlockHashesResponse)
	err := c.cc.Invoke(ctx, Msg_NewBlockHashes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewDeposits(ctx context.Context, in *MsgNewDeposits, opts ...grpc.CallOption) (*MsgNewDepositsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgNewDepositsResponse)
	err := c.cc.Invoke(ctx, Msg_NewDeposits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewPubkey(ctx context.Context, in *MsgNewPubkey, opts ...grpc.CallOption) (*MsgNewPubkeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgNewPubkeyResponse)
	err := c.cc.Invoke(ctx, Msg_NewPubkey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProcessWithdrawal(ctx context.Context, in *MsgProcessWithdrawal, opts ...grpc.CallOption) (*MsgProcessWithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgProcessWithdrawalResponse)
	err := c.cc.Invoke(ctx, Msg_ProcessWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProcessWithdrawalV2(ctx context.Context, in *MsgProcessWithdrawalV2, opts ...grpc.CallOption) (*MsgProcessWithdrawalV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgProcessWithdrawalV2Response)
	err := c.cc.Invoke(ctx, Msg_ProcessWithdrawalV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplaceWithdrawal(ctx context.Context, in *MsgReplaceWithdrawal, opts ...grpc.CallOption) (*MsgReplaceWithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgReplaceWithdrawalResponse)
	err := c.cc.Invoke(ctx, Msg_ReplaceWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplaceWithdrawalV2(ctx context.Context, in *MsgReplaceWithdrawalV2, opts ...grpc.CallOption) (*MsgReplaceWithdrawalV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgReplaceWithdrawalV2Response)
	err := c.cc.Invoke(ctx, Msg_ReplaceWithdrawalV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinalizeWithdrawal(ctx context.Context, in *MsgFinalizeWithdrawal, opts ...grpc.CallOption) (*MsgFinalizeWithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgFinalizeWithdrawalResponse)
	err := c.cc.Invoke(ctx, Msg_FinalizeWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveCancellation(ctx context.Context, in *MsgApproveCancellation, opts ...grpc.CallOption) (*MsgApproveCancellationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgApproveCancellationResponse)
	err := c.cc.Invoke(ctx, Msg_ApproveCancellation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewConsolidation(ctx context.Context, in *MsgNewConsolidation, opts ...grpc.CallOption) (*MsgNewConsolidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgNewConsolidationResponse)
	err := c.cc.Invoke(ctx, Msg_NewConsolidation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
//
// Msg defines the Msg service.
type MsgServer interface {
	// NewBlockHashs adds new bitcoin block hashes
	// the block hashes are not only for deposit/withdrawal spv, but also a
	// on-chain oracle for dapps
	// ** it requires off-chain vote by relayer group
	// ** the block should have a hard confirmation number which inconsistent with
	// the param.
	// ** every block after startBlockNumber in the geneis should be submitted on
	// chain
	NewBlockHashes(context.Context, *MsgNewBlockHashes) (*MsgNewBlockHashesResponse, error)
	// NewDeposit adds new deposits
	// ** it doesn't need off-chain vote process since we have spv
	NewDeposits(context.Context, *MsgNewDeposits) (*MsgNewDepositsResponse, error)
	// NewPubkey adds new deposit public key
	// ** it requires off-chain vote by relayer group
	NewPubkey(context.Context, *MsgNewPubkey) (*MsgNewPubkeyResponse, error)
	// ProcessWithdrawal submits a non-signed raw tx and its vote for the
	// withdrawal requests. This is the first step to process withdrawals
	// ** it requires off-chain vote by relayer group
	// ** the output index and withdrawal id list are in one-to-one correspondence
	// ** the tx price should not be larger than withdrawal request
	//
	// It informs every voter that the proposal has been approved and they can
	// process signing then. The most relayer member can construct the final
	// signed transaction and submit the transaction to the bitcoin chain when the
	// signing process is finished Since the signing is an off chain process, so
	// relayer proposer doesn't need to submit the signed transaction to the chain
	ProcessWithdrawal(context.Context, *MsgProcessWithdrawal) (*MsgProcessWithdrawalResponse, error)
	// ProcessWithdrawalV2, it's the same as ProcessWithdrawal, but it includes
	// the witness size
	ProcessWithdrawalV2(context.Context, *MsgProcessWithdrawalV2) (*MsgProcessWithdrawalV2Response, error)
	// ReplaceWithdrawal replaces a withdrawal by increasing fee
	// ** the output for the withdrawal should be not changed, but you can change
	// the value
	// ** the new tx fee should be larger than before
	// ** it requires off-chain vote by relayer group
	ReplaceWithdrawal(context.Context, *MsgReplaceWithdrawal) (*MsgReplaceWithdrawalResponse, error)
	// ReplaceWithdrawalV2, it's the same as ReplaceWithdrawal, but it includes
	// the witness size
	ReplaceWithdrawalV2(context.Context, *MsgReplaceWithdrawalV2) (*MsgReplaceWithdrawalV2Response, error)
	// FinalizeWithdrawal finlizes withdrawals and informs the chain to create the
	// withdrawal receipts This is the final step to process withdrawals
	//
	// ** proposer should provide spv to prove the withdarwal is confirmed
	// ** it doesn't need off-chain vote process
	FinalizeWithdrawal(context.Context, *MsgFinalizeWithdrawal) (*MsgFinalizeWithdrawalResponse, error)
	// ApproveCancellation approves cancellation requests
	ApproveCancellation(context.Context, *MsgApproveCancellation) (*MsgApproveCancellationResponse, error)
	// NewConsolidation initializes a consolidation request to aggregate utxo set
	// ** it requires off-chain vote by relayer group
	NewConsolidation(context.Context, *MsgNewConsolidation) (*MsgNewConsolidationResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) NewBlockHashes(context.Context, *MsgNewBlockHashes) (*MsgNewBlockHashesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBlockHashes not implemented")
}
func (UnimplementedMsgServer) NewDeposits(context.Context, *MsgNewDeposits) (*MsgNewDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDeposits not implemented")
}
func (UnimplementedMsgServer) NewPubkey(context.Context, *MsgNewPubkey) (*MsgNewPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPubkey not implemented")
}
func (UnimplementedMsgServer) ProcessWithdrawal(context.Context, *MsgProcessWithdrawal) (*MsgProcessWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWithdrawal not implemented")
}
func (UnimplementedMsgServer) ProcessWithdrawalV2(context.Context, *MsgProcessWithdrawalV2) (*MsgProcessWithdrawalV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWithdrawalV2 not implemented")
}
func (UnimplementedMsgServer) ReplaceWithdrawal(context.Context, *MsgReplaceWithdrawal) (*MsgReplaceWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceWithdrawal not implemented")
}
func (UnimplementedMsgServer) ReplaceWithdrawalV2(context.Context, *MsgReplaceWithdrawalV2) (*MsgReplaceWithdrawalV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceWithdrawalV2 not implemented")
}
func (UnimplementedMsgServer) FinalizeWithdrawal(context.Context, *MsgFinalizeWithdrawal) (*MsgFinalizeWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeWithdrawal not implemented")
}
func (UnimplementedMsgServer) ApproveCancellation(context.Context, *MsgApproveCancellation) (*MsgApproveCancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveCancellation not implemented")
}
func (UnimplementedMsgServer) NewConsolidation(context.Context, *MsgNewConsolidation) (*MsgNewConsolidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewConsolidation not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_NewBlockHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewBlockHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewBlockHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_NewBlockHashes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewBlockHashes(ctx, req.(*MsgNewBlockHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewDeposits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_NewDeposits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewDeposits(ctx, req.(*MsgNewDeposits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewPubkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_NewPubkey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewPubkey(ctx, req.(*MsgNewPubkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProcessWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessWithdrawal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProcessWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProcessWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProcessWithdrawal(ctx, req.(*MsgProcessWithdrawal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProcessWithdrawalV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessWithdrawalV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProcessWithdrawalV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProcessWithdrawalV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProcessWithdrawalV2(ctx, req.(*MsgProcessWithdrawalV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplaceWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplaceWithdrawal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplaceWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReplaceWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplaceWithdrawal(ctx, req.(*MsgReplaceWithdrawal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplaceWithdrawalV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplaceWithdrawalV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplaceWithdrawalV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReplaceWithdrawalV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplaceWithdrawalV2(ctx, req.(*MsgReplaceWithdrawalV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinalizeWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinalizeWithdrawal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinalizeWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_FinalizeWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinalizeWithdrawal(ctx, req.(*MsgFinalizeWithdrawal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveCancellation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ApproveCancellation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveCancellation(ctx, req.(*MsgApproveCancellation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewConsolidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewConsolidation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewConsolidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_NewConsolidation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewConsolidation(ctx, req.(*MsgNewConsolidation))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goat.bitcoin.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewBlockHashes",
			Handler:    _Msg_NewBlockHashes_Handler,
		},
		{
			MethodName: "NewDeposits",
			Handler:    _Msg_NewDeposits_Handler,
		},
		{
			MethodName: "NewPubkey",
			Handler:    _Msg_NewPubkey_Handler,
		},
		{
			MethodName: "ProcessWithdrawal",
			Handler:    _Msg_ProcessWithdrawal_Handler,
		},
		{
			MethodName: "ProcessWithdrawalV2",
			Handler:    _Msg_ProcessWithdrawalV2_Handler,
		},
		{
			MethodName: "ReplaceWithdrawal",
			Handler:    _Msg_ReplaceWithdrawal_Handler,
		},
		{
			MethodName: "ReplaceWithdrawalV2",
			Handler:    _Msg_ReplaceWithdrawalV2_Handler,
		},
		{
			MethodName: "FinalizeWithdrawal",
			Handler:    _Msg_FinalizeWithdrawal_Handler,
		},
		{
			MethodName: "ApproveCancellation",
			Handler:    _Msg_ApproveCancellation_Handler,
		},
		{
			MethodName: "NewConsolidation",
			Handler:    _Msg_NewConsolidation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goat/bitcoin/v1/tx.proto",
}
