// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: goat/bitcoin/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/goatnetwork/goat/x/relayer/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgNewBlockHashes represents a solid block header is confirmed by relayer
// group
type MsgNewBlockHashes struct {
	Proposer         string       `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Vote             *types.Votes `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	StartBlockNumber uint64       `protobuf:"varint,3,opt,name=start_block_number,json=startBlockNumber,proto3" json:"start_block_number,omitempty"`
	BlockHash        [][]byte     `protobuf:"bytes,4,rep,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *MsgNewBlockHashes) Reset()         { *m = MsgNewBlockHashes{} }
func (m *MsgNewBlockHashes) String() string { return proto.CompactTextString(m) }
func (*MsgNewBlockHashes) ProtoMessage()    {}
func (*MsgNewBlockHashes) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{0}
}
func (m *MsgNewBlockHashes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBlockHashes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBlockHashes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBlockHashes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBlockHashes.Merge(m, src)
}
func (m *MsgNewBlockHashes) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBlockHashes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBlockHashes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBlockHashes proto.InternalMessageInfo

func (m *MsgNewBlockHashes) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgNewBlockHashes) GetVote() *types.Votes {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *MsgNewBlockHashes) GetStartBlockNumber() uint64 {
	if m != nil {
		return m.StartBlockNumber
	}
	return 0
}

func (m *MsgNewBlockHashes) GetBlockHash() [][]byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

// MsgNewBlockHashesResponse defines the Msg/NewHeaders response type.
type MsgNewBlockHashesResponse struct {
}

func (m *MsgNewBlockHashesResponse) Reset()         { *m = MsgNewBlockHashesResponse{} }
func (m *MsgNewBlockHashesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewBlockHashesResponse) ProtoMessage()    {}
func (*MsgNewBlockHashesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{1}
}
func (m *MsgNewBlockHashesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBlockHashesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBlockHashesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBlockHashesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBlockHashesResponse.Merge(m, src)
}
func (m *MsgNewBlockHashesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBlockHashesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBlockHashesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBlockHashesResponse proto.InternalMessageInfo

// MsgNewDeposits represents new deposits
type MsgNewDeposits struct {
	Proposer string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// block_headers is an array which includes a height and raw header pair
	// the raw block header is always 80 bytes
	// https://github.com/btcsuite/btcd/blob/24eb815168f49dea84767817717a11bd7928eb23/wire/blockheader.go#L65
	BlockHeaders []*BlockHeader `protobuf:"bytes,2,rep,name=block_headers,json=blockHeaders,proto3" json:"block_headers,omitempty"`
	Deposits     []*Deposit     `protobuf:"bytes,3,rep,name=deposits,proto3" json:"deposits,omitempty"`
}

func (m *MsgNewDeposits) Reset()         { *m = MsgNewDeposits{} }
func (m *MsgNewDeposits) String() string { return proto.CompactTextString(m) }
func (*MsgNewDeposits) ProtoMessage()    {}
func (*MsgNewDeposits) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{2}
}
func (m *MsgNewDeposits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewDeposits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewDeposits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewDeposits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewDeposits.Merge(m, src)
}
func (m *MsgNewDeposits) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewDeposits) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewDeposits.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewDeposits proto.InternalMessageInfo

func (m *MsgNewDeposits) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgNewDeposits) GetBlockHeaders() []*BlockHeader {
	if m != nil {
		return m.BlockHeaders
	}
	return nil
}

func (m *MsgNewDeposits) GetDeposits() []*Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

// MsgNewDepositsResponse defines the Msg/NewDeposits response type.
type MsgNewDepositsResponse struct {
}

func (m *MsgNewDepositsResponse) Reset()         { *m = MsgNewDepositsResponse{} }
func (m *MsgNewDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewDepositsResponse) ProtoMessage()    {}
func (*MsgNewDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{3}
}
func (m *MsgNewDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewDepositsResponse.Merge(m, src)
}
func (m *MsgNewDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewDepositsResponse proto.InternalMessageInfo

// MsgNewPubkey is the Msg/NewPubkey request type.
type MsgNewPubkey struct {
	Proposer string           `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Vote     *types.Votes     `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	Pubkey   *types.PublicKey `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *MsgNewPubkey) Reset()         { *m = MsgNewPubkey{} }
func (m *MsgNewPubkey) String() string { return proto.CompactTextString(m) }
func (*MsgNewPubkey) ProtoMessage()    {}
func (*MsgNewPubkey) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{4}
}
func (m *MsgNewPubkey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewPubkey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewPubkey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewPubkey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewPubkey.Merge(m, src)
}
func (m *MsgNewPubkey) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewPubkey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewPubkey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewPubkey proto.InternalMessageInfo

func (m *MsgNewPubkey) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgNewPubkey) GetVote() *types.Votes {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *MsgNewPubkey) GetPubkey() *types.PublicKey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

// MsgNewPubkeyResponse is the Msg/NewPubkey response type.
type MsgNewPubkeyResponse struct {
}

func (m *MsgNewPubkeyResponse) Reset()         { *m = MsgNewPubkeyResponse{} }
func (m *MsgNewPubkeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewPubkeyResponse) ProtoMessage()    {}
func (*MsgNewPubkeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{5}
}
func (m *MsgNewPubkeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewPubkeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewPubkeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewPubkeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewPubkeyResponse.Merge(m, src)
}
func (m *MsgNewPubkeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewPubkeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewPubkeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewPubkeyResponse proto.InternalMessageInfo

// MsgProcessWithdrawal
type MsgProcessWithdrawal struct {
	Proposer string       `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Vote     *types.Votes `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	// the withdraw id list
	Id          []uint64 `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	NoWitnessTx []byte   `protobuf:"bytes,4,opt,name=no_witness_tx,json=noWitnessTx,proto3" json:"no_witness_tx,omitempty"`
	// tx fee in satoshi
	TxFee uint64 `protobuf:"varint,5,opt,name=tx_fee,json=txFee,proto3" json:"tx_fee,omitempty"`
}

func (m *MsgProcessWithdrawal) Reset()         { *m = MsgProcessWithdrawal{} }
func (m *MsgProcessWithdrawal) String() string { return proto.CompactTextString(m) }
func (*MsgProcessWithdrawal) ProtoMessage()    {}
func (*MsgProcessWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{6}
}
func (m *MsgProcessWithdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessWithdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessWithdrawal.Merge(m, src)
}
func (m *MsgProcessWithdrawal) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessWithdrawal proto.InternalMessageInfo

func (m *MsgProcessWithdrawal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgProcessWithdrawal) GetVote() *types.Votes {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *MsgProcessWithdrawal) GetId() []uint64 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MsgProcessWithdrawal) GetNoWitnessTx() []byte {
	if m != nil {
		return m.NoWitnessTx
	}
	return nil
}

func (m *MsgProcessWithdrawal) GetTxFee() uint64 {
	if m != nil {
		return m.TxFee
	}
	return 0
}

// MsgProcessWithdrawalResponse
type MsgProcessWithdrawalResponse struct {
}

func (m *MsgProcessWithdrawalResponse) Reset()         { *m = MsgProcessWithdrawalResponse{} }
func (m *MsgProcessWithdrawalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProcessWithdrawalResponse) ProtoMessage()    {}
func (*MsgProcessWithdrawalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{7}
}
func (m *MsgProcessWithdrawalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessWithdrawalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessWithdrawalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessWithdrawalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessWithdrawalResponse.Merge(m, src)
}
func (m *MsgProcessWithdrawalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessWithdrawalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessWithdrawalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessWithdrawalResponse proto.InternalMessageInfo

// MsgProcessWithdrawal
type MsgProcessWithdrawalV2 struct {
	Proposer string       `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Vote     *types.Votes `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	// the withdraw id list
	Id          []uint64 `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	NoWitnessTx []byte   `protobuf:"bytes,4,opt,name=no_witness_tx,json=noWitnessTx,proto3" json:"no_witness_tx,omitempty"`
	// tx fee in satoshi
	TxFee uint64 `protobuf:"varint,5,opt,name=tx_fee,json=txFee,proto3" json:"tx_fee,omitempty"`
	// witness size in bytes
	WitnessSize uint64 `protobuf:"varint,6,opt,name=witness_size,json=witnessSize,proto3" json:"witness_size,omitempty"`
}

func (m *MsgProcessWithdrawalV2) Reset()         { *m = MsgProcessWithdrawalV2{} }
func (m *MsgProcessWithdrawalV2) String() string { return proto.CompactTextString(m) }
func (*MsgProcessWithdrawalV2) ProtoMessage()    {}
func (*MsgProcessWithdrawalV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{8}
}
func (m *MsgProcessWithdrawalV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessWithdrawalV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessWithdrawalV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessWithdrawalV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessWithdrawalV2.Merge(m, src)
}
func (m *MsgProcessWithdrawalV2) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessWithdrawalV2) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessWithdrawalV2.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessWithdrawalV2 proto.InternalMessageInfo

func (m *MsgProcessWithdrawalV2) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgProcessWithdrawalV2) GetVote() *types.Votes {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *MsgProcessWithdrawalV2) GetId() []uint64 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MsgProcessWithdrawalV2) GetNoWitnessTx() []byte {
	if m != nil {
		return m.NoWitnessTx
	}
	return nil
}

func (m *MsgProcessWithdrawalV2) GetTxFee() uint64 {
	if m != nil {
		return m.TxFee
	}
	return 0
}

func (m *MsgProcessWithdrawalV2) GetWitnessSize() uint64 {
	if m != nil {
		return m.WitnessSize
	}
	return 0
}

// MsgProcessWithdrawalV2Response
type MsgProcessWithdrawalV2Response struct {
}

func (m *MsgProcessWithdrawalV2Response) Reset()         { *m = MsgProcessWithdrawalV2Response{} }
func (m *MsgProcessWithdrawalV2Response) String() string { return proto.CompactTextString(m) }
func (*MsgProcessWithdrawalV2Response) ProtoMessage()    {}
func (*MsgProcessWithdrawalV2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{9}
}
func (m *MsgProcessWithdrawalV2Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessWithdrawalV2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessWithdrawalV2Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessWithdrawalV2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessWithdrawalV2Response.Merge(m, src)
}
func (m *MsgProcessWithdrawalV2Response) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessWithdrawalV2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessWithdrawalV2Response.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessWithdrawalV2Response proto.InternalMessageInfo

// MsgReplaceWithdrawal
type MsgReplaceWithdrawal struct {
	Proposer string       `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Vote     *types.Votes `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	// the process id of the withdrawals to replace
	Pid uint64 `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	// the new tx for the withdrawal proposal
	NewNoWitnessTx []byte `protobuf:"bytes,4,opt,name=new_no_witness_tx,json=newNoWitnessTx,proto3" json:"new_no_witness_tx,omitempty"`
	// tx fee in satoshi
	NewTxFee uint64 `protobuf:"varint,5,opt,name=new_tx_fee,json=newTxFee,proto3" json:"new_tx_fee,omitempty"`
}

func (m *MsgReplaceWithdrawal) Reset()         { *m = MsgReplaceWithdrawal{} }
func (m *MsgReplaceWithdrawal) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceWithdrawal) ProtoMessage()    {}
func (*MsgReplaceWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{10}
}
func (m *MsgReplaceWithdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceWithdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceWithdrawal.Merge(m, src)
}
func (m *MsgReplaceWithdrawal) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceWithdrawal proto.InternalMessageInfo

func (m *MsgReplaceWithdrawal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgReplaceWithdrawal) GetVote() *types.Votes {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *MsgReplaceWithdrawal) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *MsgReplaceWithdrawal) GetNewNoWitnessTx() []byte {
	if m != nil {
		return m.NewNoWitnessTx
	}
	return nil
}

func (m *MsgReplaceWithdrawal) GetNewTxFee() uint64 {
	if m != nil {
		return m.NewTxFee
	}
	return 0
}

// MsgReplaceWithdrawalResponse
type MsgReplaceWithdrawalResponse struct {
}

func (m *MsgReplaceWithdrawalResponse) Reset()         { *m = MsgReplaceWithdrawalResponse{} }
func (m *MsgReplaceWithdrawalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceWithdrawalResponse) ProtoMessage()    {}
func (*MsgReplaceWithdrawalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{11}
}
func (m *MsgReplaceWithdrawalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceWithdrawalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceWithdrawalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceWithdrawalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceWithdrawalResponse.Merge(m, src)
}
func (m *MsgReplaceWithdrawalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceWithdrawalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceWithdrawalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceWithdrawalResponse proto.InternalMessageInfo

// MsgReplaceWithdrawal
type MsgReplaceWithdrawalV2 struct {
	Proposer string       `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Vote     *types.Votes `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	// the process id of the withdrawals to replace
	Pid uint64 `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	// the new tx for the withdrawal proposal
	NewNoWitnessTx []byte `protobuf:"bytes,4,opt,name=new_no_witness_tx,json=newNoWitnessTx,proto3" json:"new_no_witness_tx,omitempty"`
	// tx fee in satoshi
	NewTxFee uint64 `protobuf:"varint,5,opt,name=new_tx_fee,json=newTxFee,proto3" json:"new_tx_fee,omitempty"`
	// witness size in bytes
	WitnessSize uint64 `protobuf:"varint,6,opt,name=witness_size,json=witnessSize,proto3" json:"witness_size,omitempty"`
}

func (m *MsgReplaceWithdrawalV2) Reset()         { *m = MsgReplaceWithdrawalV2{} }
func (m *MsgReplaceWithdrawalV2) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceWithdrawalV2) ProtoMessage()    {}
func (*MsgReplaceWithdrawalV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{12}
}
func (m *MsgReplaceWithdrawalV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceWithdrawalV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceWithdrawalV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceWithdrawalV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceWithdrawalV2.Merge(m, src)
}
func (m *MsgReplaceWithdrawalV2) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceWithdrawalV2) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceWithdrawalV2.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceWithdrawalV2 proto.InternalMessageInfo

func (m *MsgReplaceWithdrawalV2) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgReplaceWithdrawalV2) GetVote() *types.Votes {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *MsgReplaceWithdrawalV2) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *MsgReplaceWithdrawalV2) GetNewNoWitnessTx() []byte {
	if m != nil {
		return m.NewNoWitnessTx
	}
	return nil
}

func (m *MsgReplaceWithdrawalV2) GetNewTxFee() uint64 {
	if m != nil {
		return m.NewTxFee
	}
	return 0
}

func (m *MsgReplaceWithdrawalV2) GetWitnessSize() uint64 {
	if m != nil {
		return m.WitnessSize
	}
	return 0
}

// MsgReplaceWithdrawalV2Response
type MsgReplaceWithdrawalV2Response struct {
}

func (m *MsgReplaceWithdrawalV2Response) Reset()         { *m = MsgReplaceWithdrawalV2Response{} }
func (m *MsgReplaceWithdrawalV2Response) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceWithdrawalV2Response) ProtoMessage()    {}
func (*MsgReplaceWithdrawalV2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{13}
}
func (m *MsgReplaceWithdrawalV2Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceWithdrawalV2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceWithdrawalV2Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceWithdrawalV2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceWithdrawalV2Response.Merge(m, src)
}
func (m *MsgReplaceWithdrawalV2Response) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceWithdrawalV2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceWithdrawalV2Response.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceWithdrawalV2Response proto.InternalMessageInfo

// MsgFinalizeWithdrawal
type MsgFinalizeWithdrawal struct {
	Proposer string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// the process id of the withdrawals to finalize
	Pid uint64 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	// the final confirmed txid for the withdrawal proposal
	Txid []byte `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	// block_number the block number that transaction located at
	BlockNumber uint64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// tx_index is the index of transaction in the block
	TxIndex uint32 `protobuf:"varint,5,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// intermediate proof is the proof without the txid and merkel root
	IntermediateProof []byte `protobuf:"bytes,6,opt,name=intermediate_proof,json=intermediateProof,proto3" json:"intermediate_proof,omitempty"`
	// block_header is the raw bitcoin block header bytes
	BlockHeader []byte `protobuf:"bytes,7,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
}

func (m *MsgFinalizeWithdrawal) Reset()         { *m = MsgFinalizeWithdrawal{} }
func (m *MsgFinalizeWithdrawal) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizeWithdrawal) ProtoMessage()    {}
func (*MsgFinalizeWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{14}
}
func (m *MsgFinalizeWithdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizeWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizeWithdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizeWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizeWithdrawal.Merge(m, src)
}
func (m *MsgFinalizeWithdrawal) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizeWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizeWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizeWithdrawal proto.InternalMessageInfo

func (m *MsgFinalizeWithdrawal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgFinalizeWithdrawal) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *MsgFinalizeWithdrawal) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *MsgFinalizeWithdrawal) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *MsgFinalizeWithdrawal) GetTxIndex() uint32 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *MsgFinalizeWithdrawal) GetIntermediateProof() []byte {
	if m != nil {
		return m.IntermediateProof
	}
	return nil
}

func (m *MsgFinalizeWithdrawal) GetBlockHeader() []byte {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

// MsgFinalizeWithdrawalResponse
type MsgFinalizeWithdrawalResponse struct {
}

func (m *MsgFinalizeWithdrawalResponse) Reset()         { *m = MsgFinalizeWithdrawalResponse{} }
func (m *MsgFinalizeWithdrawalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizeWithdrawalResponse) ProtoMessage()    {}
func (*MsgFinalizeWithdrawalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{15}
}
func (m *MsgFinalizeWithdrawalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizeWithdrawalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizeWithdrawalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizeWithdrawalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizeWithdrawalResponse.Merge(m, src)
}
func (m *MsgFinalizeWithdrawalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizeWithdrawalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizeWithdrawalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizeWithdrawalResponse proto.InternalMessageInfo

// MsgApproveCancellation
type MsgApproveCancellation struct {
	Proposer string   `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Id       []uint64 `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgApproveCancellation) Reset()         { *m = MsgApproveCancellation{} }
func (m *MsgApproveCancellation) String() string { return proto.CompactTextString(m) }
func (*MsgApproveCancellation) ProtoMessage()    {}
func (*MsgApproveCancellation) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{16}
}
func (m *MsgApproveCancellation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveCancellation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveCancellation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveCancellation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveCancellation.Merge(m, src)
}
func (m *MsgApproveCancellation) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveCancellation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveCancellation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveCancellation proto.InternalMessageInfo

func (m *MsgApproveCancellation) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgApproveCancellation) GetId() []uint64 {
	if m != nil {
		return m.Id
	}
	return nil
}

// MsgApproveCancellationResponse
type MsgApproveCancellationResponse struct {
}

func (m *MsgApproveCancellationResponse) Reset()         { *m = MsgApproveCancellationResponse{} }
func (m *MsgApproveCancellationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApproveCancellationResponse) ProtoMessage()    {}
func (*MsgApproveCancellationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{17}
}
func (m *MsgApproveCancellationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveCancellationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveCancellationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveCancellationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveCancellationResponse.Merge(m, src)
}
func (m *MsgApproveCancellationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveCancellationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveCancellationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveCancellationResponse proto.InternalMessageInfo

// MsgNewConsolidation
type MsgNewConsolidation struct {
	Proposer    string       `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	NoWitnessTx []byte       `protobuf:"bytes,2,opt,name=no_witness_tx,json=noWitnessTx,proto3" json:"no_witness_tx,omitempty"`
	Vote        *types.Votes `protobuf:"bytes,3,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (m *MsgNewConsolidation) Reset()         { *m = MsgNewConsolidation{} }
func (m *MsgNewConsolidation) String() string { return proto.CompactTextString(m) }
func (*MsgNewConsolidation) ProtoMessage()    {}
func (*MsgNewConsolidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{18}
}
func (m *MsgNewConsolidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewConsolidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewConsolidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewConsolidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewConsolidation.Merge(m, src)
}
func (m *MsgNewConsolidation) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewConsolidation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewConsolidation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewConsolidation proto.InternalMessageInfo

func (m *MsgNewConsolidation) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgNewConsolidation) GetNoWitnessTx() []byte {
	if m != nil {
		return m.NoWitnessTx
	}
	return nil
}

func (m *MsgNewConsolidation) GetVote() *types.Votes {
	if m != nil {
		return m.Vote
	}
	return nil
}

// MsgNewConsolidationResponse
type MsgNewConsolidationResponse struct {
}

func (m *MsgNewConsolidationResponse) Reset()         { *m = MsgNewConsolidationResponse{} }
func (m *MsgNewConsolidationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewConsolidationResponse) ProtoMessage()    {}
func (*MsgNewConsolidationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{19}
}
func (m *MsgNewConsolidationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewConsolidationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewConsolidationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewConsolidationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewConsolidationResponse.Merge(m, src)
}
func (m *MsgNewConsolidationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewConsolidationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewConsolidationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewConsolidationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgNewBlockHashes)(nil), "goat.bitcoin.v1.MsgNewBlockHashes")
	proto.RegisterType((*MsgNewBlockHashesResponse)(nil), "goat.bitcoin.v1.MsgNewBlockHashesResponse")
	proto.RegisterType((*MsgNewDeposits)(nil), "goat.bitcoin.v1.MsgNewDeposits")
	proto.RegisterType((*MsgNewDepositsResponse)(nil), "goat.bitcoin.v1.MsgNewDepositsResponse")
	proto.RegisterType((*MsgNewPubkey)(nil), "goat.bitcoin.v1.MsgNewPubkey")
	proto.RegisterType((*MsgNewPubkeyResponse)(nil), "goat.bitcoin.v1.MsgNewPubkeyResponse")
	proto.RegisterType((*MsgProcessWithdrawal)(nil), "goat.bitcoin.v1.MsgProcessWithdrawal")
	proto.RegisterType((*MsgProcessWithdrawalResponse)(nil), "goat.bitcoin.v1.MsgProcessWithdrawalResponse")
	proto.RegisterType((*MsgProcessWithdrawalV2)(nil), "goat.bitcoin.v1.MsgProcessWithdrawalV2")
	proto.RegisterType((*MsgProcessWithdrawalV2Response)(nil), "goat.bitcoin.v1.MsgProcessWithdrawalV2Response")
	proto.RegisterType((*MsgReplaceWithdrawal)(nil), "goat.bitcoin.v1.MsgReplaceWithdrawal")
	proto.RegisterType((*MsgReplaceWithdrawalResponse)(nil), "goat.bitcoin.v1.MsgReplaceWithdrawalResponse")
	proto.RegisterType((*MsgReplaceWithdrawalV2)(nil), "goat.bitcoin.v1.MsgReplaceWithdrawalV2")
	proto.RegisterType((*MsgReplaceWithdrawalV2Response)(nil), "goat.bitcoin.v1.MsgReplaceWithdrawalV2Response")
	proto.RegisterType((*MsgFinalizeWithdrawal)(nil), "goat.bitcoin.v1.MsgFinalizeWithdrawal")
	proto.RegisterType((*MsgFinalizeWithdrawalResponse)(nil), "goat.bitcoin.v1.MsgFinalizeWithdrawalResponse")
	proto.RegisterType((*MsgApproveCancellation)(nil), "goat.bitcoin.v1.MsgApproveCancellation")
	proto.RegisterType((*MsgApproveCancellationResponse)(nil), "goat.bitcoin.v1.MsgApproveCancellationResponse")
	proto.RegisterType((*MsgNewConsolidation)(nil), "goat.bitcoin.v1.MsgNewConsolidation")
	proto.RegisterType((*MsgNewConsolidationResponse)(nil), "goat.bitcoin.v1.MsgNewConsolidationResponse")
}

func init() { proto.RegisterFile("goat/bitcoin/v1/tx.proto", fileDescriptor_061207c379e1a1b2) }

var fileDescriptor_061207c379e1a1b2 = []byte{
	// 1100 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcf, 0x4f, 0xe3, 0x46,
	0x14, 0xc6, 0x4e, 0x60, 0x61, 0x12, 0x28, 0x78, 0x77, 0xa9, 0x31, 0x24, 0x9b, 0xba, 0xbb, 0x25,
	0xa5, 0x4b, 0x2c, 0xd2, 0x6d, 0x2b, 0xe5, 0x06, 0xdb, 0xae, 0x5a, 0x55, 0x20, 0xea, 0x5d, 0x81,
	0xd4, 0x4b, 0x6a, 0xc7, 0x43, 0x18, 0xe1, 0x78, 0x2c, 0xcf, 0x90, 0x18, 0x4e, 0x55, 0x8f, 0x7b,
	0xea, 0xad, 0xea, 0xb1, 0xff, 0x01, 0x95, 0x7a, 0xeb, 0x3f, 0xd0, 0xe3, 0xb6, 0xbd, 0xf4, 0x58,
	0xc1, 0x81, 0x6b, 0x4f, 0x3d, 0xf4, 0x54, 0x79, 0xfc, 0x83, 0x84, 0x99, 0x40, 0xb4, 0xdb, 0x22,
	0xed, 0x05, 0xd9, 0xf3, 0x7d, 0x33, 0xef, 0x7d, 0x1f, 0xcf, 0xef, 0x4d, 0x80, 0xda, 0xc6, 0x16,
	0x35, 0x6c, 0x44, 0x5b, 0x18, 0x79, 0x46, 0x77, 0xcd, 0xa0, 0x61, 0xcd, 0x0f, 0x30, 0xc5, 0xca,
	0x1b, 0x11, 0x52, 0x4b, 0x90, 0x5a, 0x77, 0x4d, 0x9b, 0xb3, 0x3a, 0xc8, 0xc3, 0x06, 0xfb, 0x1b,
	0x73, 0xb4, 0x37, 0x5b, 0x98, 0x74, 0x30, 0x31, 0x3a, 0xa4, 0x1d, 0xed, 0xed, 0x90, 0x76, 0x02,
	0x2c, 0xc4, 0x40, 0x93, 0xbd, 0x19, 0xf1, 0x4b, 0x02, 0x95, 0x2e, 0x47, 0x4c, 0x43, 0xf4, 0xc3,
	0x01, 0x74, 0xad, 0x23, 0x18, 0x44, 0x70, 0xf2, 0x18, 0xc3, 0xfa, 0xdf, 0x12, 0x98, 0xdb, 0x24,
	0xed, 0x2d, 0xd8, 0xdb, 0x70, 0x71, 0xeb, 0xe0, 0x53, 0x8b, 0xec, 0x43, 0xa2, 0x3c, 0x02, 0x93,
	0x7e, 0x80, 0x7d, 0x4c, 0x60, 0xa0, 0x4a, 0x15, 0xa9, 0x3a, 0xb5, 0xa1, 0xfe, 0xf6, 0xd3, 0xea,
	0x9d, 0x24, 0xee, 0xba, 0xe3, 0x04, 0x90, 0x90, 0xa7, 0x34, 0x40, 0x5e, 0xdb, 0xcc, 0x98, 0xca,
	0x0a, 0xc8, 0x77, 0x31, 0x85, 0xaa, 0x5c, 0x91, 0xaa, 0x85, 0xfa, 0x7c, 0x8d, 0x09, 0x4e, 0xc3,
	0x75, 0xd7, 0x6a, 0x3b, 0x98, 0x42, 0x62, 0x32, 0x8e, 0xf2, 0x10, 0x28, 0x84, 0x5a, 0x01, 0x6d,
	0xda, 0x51, 0xd8, 0xa6, 0x77, 0xd8, 0xb1, 0x61, 0xa0, 0xe6, 0x2a, 0x52, 0x35, 0x6f, 0xce, 0x32,
	0x84, 0xe5, 0xb3, 0xc5, 0xd6, 0x95, 0x12, 0x00, 0x31, 0x6f, 0xdf, 0x22, 0xfb, 0x6a, 0xbe, 0x92,
	0xab, 0x16, 0xcd, 0x29, 0x3b, 0x4d, 0xb8, 0x51, 0xff, 0xe6, 0xfc, 0x64, 0x25, 0xcb, 0xe3, 0xf9,
	0xf9, 0xc9, 0x4a, 0x85, 0xa9, 0x0e, 0x33, 0x5b, 0x38, 0x89, 0xfa, 0x22, 0x58, 0xe0, 0x16, 0x4d,
	0x48, 0x7c, 0xec, 0x11, 0xa8, 0xff, 0x25, 0x81, 0x99, 0x18, 0xfd, 0x18, 0xfa, 0x98, 0x20, 0xfa,
	0xb2, 0x96, 0xac, 0x83, 0xe9, 0x24, 0x71, 0x68, 0x39, 0x30, 0x20, 0xaa, 0x5c, 0xc9, 0x55, 0x0b,
	0xf5, 0xa5, 0xda, 0xa5, 0x62, 0xa8, 0xc5, 0x59, 0x30, 0x92, 0x59, 0xb4, 0x2f, 0x5e, 0x58, 0x60,
	0x27, 0x49, 0x42, 0xcd, 0xb1, 0xdd, 0x2a, 0xb7, 0x3b, 0xc9, 0xd2, 0xcc, 0x98, 0x0d, 0x83, 0xb3,
	0xa4, 0x24, 0xb4, 0x24, 0xd5, 0xa7, 0xab, 0x60, 0x7e, 0x70, 0x25, 0x33, 0xe3, 0x77, 0x09, 0x14,
	0x63, 0x68, 0xfb, 0xd0, 0x3e, 0x80, 0x47, 0x37, 0x50, 0x1d, 0x75, 0x30, 0xe1, 0xb3, 0x58, 0xac,
	0x22, 0x0a, 0x75, 0x8d, 0x63, 0x6f, 0x1f, 0xda, 0x2e, 0x6a, 0x7d, 0x0e, 0x8f, 0xcc, 0x84, 0xd9,
	0x58, 0xe5, 0x14, 0x2f, 0x0a, 0x15, 0xc7, 0x22, 0xf4, 0x79, 0x70, 0xa7, 0xff, 0x3d, 0x53, 0xfb,
	0x8f, 0xc4, 0x80, 0xed, 0x00, 0xb7, 0x20, 0x21, 0xbb, 0x88, 0xee, 0x3b, 0x81, 0xd5, 0xb3, 0xdc,
	0x1b, 0x50, 0x3d, 0x03, 0x64, 0xe4, 0xb0, 0xff, 0x71, 0xde, 0x94, 0x91, 0xa3, 0xe8, 0x60, 0xda,
	0xc3, 0xcd, 0x1e, 0xa2, 0x1e, 0x24, 0xa4, 0x49, 0x43, 0x35, 0x5f, 0x91, 0xaa, 0x45, 0xb3, 0xe0,
	0xe1, 0xdd, 0x78, 0xed, 0x59, 0xa8, 0xdc, 0x05, 0x13, 0x34, 0x6c, 0xee, 0x41, 0xa8, 0x8e, 0xb3,
	0x6f, 0x67, 0x9c, 0x86, 0x4f, 0x20, 0x6c, 0x7c, 0xc0, 0x99, 0xf1, 0x36, 0x6f, 0x06, 0xa7, 0x51,
	0x2f, 0x83, 0x25, 0xd1, 0x7a, 0x66, 0xce, 0x0f, 0x32, 0xab, 0x12, 0x8e, 0xb0, 0x53, 0x7f, 0xad,
	0xec, 0x51, 0xde, 0x02, 0xc5, 0x74, 0x1f, 0x41, 0xc7, 0x50, 0x9d, 0x60, 0x60, 0x21, 0x59, 0x7b,
	0x8a, 0x8e, 0x61, 0xe3, 0x23, 0xce, 0xc1, 0x07, 0x23, 0x38, 0xb8, 0x53, 0xd7, 0x2b, 0xa0, 0x2c,
	0x46, 0x32, 0x17, 0x9f, 0xcb, 0xac, 0xc4, 0x4c, 0xe8, 0xbb, 0x56, 0x0b, 0xde, 0x68, 0x89, 0xcd,
	0x82, 0x9c, 0xcf, 0x4c, 0x8c, 0xf4, 0x46, 0x8f, 0xca, 0xbb, 0x60, 0xce, 0x83, 0xbd, 0xa6, 0xc8,
	0xc9, 0x19, 0x0f, 0xf6, 0xb6, 0xfa, 0xcc, 0x5c, 0x02, 0x20, 0xa2, 0x0e, 0x18, 0x3a, 0xe9, 0xc1,
	0xde, 0xb3, 0xd1, 0x4b, 0x8e, 0xd3, 0x9c, 0x94, 0x1c, 0xb7, 0x9e, 0x99, 0xf5, 0x63, 0x5c, 0x72,
	0x1c, 0xe1, 0x46, 0x4a, 0xee, 0xff, 0xb3, 0xeb, 0x3f, 0x2b, 0x41, 0x81, 0x31, 0x49, 0x09, 0x0a,
	0x90, 0xcc, 0xd5, 0x9f, 0x65, 0x70, 0x77, 0x93, 0xb4, 0x9f, 0x20, 0xcf, 0x72, 0xd1, 0xf1, 0xab,
	0xd7, 0x60, 0x62, 0x94, 0x7c, 0x61, 0x94, 0x02, 0xf2, 0x34, 0x4c, 0xbc, 0x2b, 0x9a, 0xec, 0x39,
	0xd2, 0x3c, 0x30, 0xee, 0xf3, 0xb1, 0x66, 0xbb, 0x6f, 0xd2, 0x2f, 0x80, 0x49, 0x1a, 0x36, 0x91,
	0xe7, 0xc0, 0x90, 0x59, 0x36, 0x6d, 0xde, 0xa2, 0xe1, 0x67, 0xd1, 0xab, 0xb2, 0x0a, 0x14, 0xe4,
	0x51, 0x18, 0x74, 0xa0, 0x83, 0x2c, 0x0a, 0xa3, 0xbb, 0x10, 0xde, 0x63, 0xbe, 0x15, 0xcd, 0xb9,
	0x7e, 0x64, 0x3b, 0x02, 0x2e, 0x82, 0xc5, 0xa3, 0x57, 0xbd, 0x15, 0x77, 0x87, 0xbe, 0xd9, 0xda,
	0xf8, 0x90, 0x33, 0xf8, 0x3e, 0x6f, 0x30, 0xef, 0x91, 0x7e, 0x0f, 0x94, 0x84, 0x40, 0x66, 0xef,
	0x77, 0x12, 0x2b, 0xda, 0x75, 0xdf, 0x0f, 0x70, 0x17, 0x3e, 0xb6, 0xbc, 0x16, 0x74, 0x5d, 0x8b,
	0x22, 0xec, 0xbd, 0xa4, 0xbf, 0x71, 0xef, 0x93, 0xd3, 0xde, 0x37, 0x5a, 0x69, 0x08, 0xc2, 0x27,
	0xa5, 0x21, 0x40, 0xb2, 0xdc, 0x7f, 0x95, 0xc0, 0xed, 0x78, 0x32, 0x3e, 0xc6, 0x1e, 0xc1, 0x2e,
	0x72, 0x5e, 0x25, 0x71, 0xae, 0x49, 0xcb, 0x7c, 0x93, 0x4e, 0xbf, 0xc8, 0xdc, 0xf5, 0x5f, 0x64,
	0xe3, 0x11, 0x27, 0x5c, 0x17, 0x4e, 0xf9, 0x81, 0xdc, 0xf5, 0x12, 0x58, 0x14, 0x2c, 0xa7, 0x92,
	0xeb, 0xdf, 0x4f, 0x82, 0xdc, 0x26, 0x69, 0x2b, 0x5f, 0x81, 0x99, 0x4b, 0x17, 0x61, 0x9d, 0xbb,
	0x6a, 0x71, 0x97, 0x46, 0x6d, 0xe5, 0x7a, 0x4e, 0x1a, 0x49, 0xd9, 0x05, 0x85, 0xfe, 0x4b, 0xe5,
	0xbd, 0x21, 0x5b, 0x53, 0x82, 0xb6, 0x7c, 0x0d, 0x21, 0x3b, 0xf8, 0x0b, 0x30, 0x75, 0x71, 0x41,
	0x2b, 0x0d, 0xd9, 0x15, 0xc3, 0xda, 0x83, 0x2b, 0xe1, 0xec, 0x48, 0x04, 0xe6, 0xf8, 0x5b, 0x90,
	0x70, 0x2f, 0x47, 0xd3, 0x56, 0x47, 0xa2, 0x65, 0xa1, 0x30, 0xb8, 0x2d, 0xba, 0x53, 0x2c, 0x8f,
	0x74, 0xca, 0x4e, 0x5d, 0x33, 0x46, 0x24, 0xf6, 0x6b, 0xe3, 0xc7, 0xaf, 0x50, 0x1b, 0x47, 0x13,
	0x6b, 0x1b, 0x3a, 0xc0, 0x22, 0x6d, 0xa2, 0xe1, 0xb5, 0x3c, 0xd2, 0x29, 0xc3, 0xb4, 0x5d, 0xd1,
	0xdb, 0x15, 0x17, 0x28, 0x82, 0xbe, 0xfe, 0x8e, 0xe8, 0x18, 0x9e, 0xa7, 0xd5, 0x46, 0xe3, 0xf5,
	0xcb, 0x13, 0xb5, 0x39, 0xa1, 0x3c, 0x01, 0x51, 0x2c, 0xef, 0x8a, 0xfe, 0xa4, 0xec, 0x81, 0x59,
	0xae, 0x37, 0xdd, 0x1f, 0x52, 0xd1, 0x03, 0x2c, 0xed, 0xe1, 0x28, 0xac, 0x34, 0x8e, 0x36, 0xfe,
	0xf5, 0xf9, 0xc9, 0x8a, 0xb4, 0xf1, 0xc9, 0x2f, 0xa7, 0x65, 0xe9, 0xc5, 0x69, 0x59, 0xfa, 0xf3,
	0xb4, 0x2c, 0x7d, 0x7b, 0x56, 0x1e, 0x7b, 0x71, 0x56, 0x1e, 0xfb, 0xe3, 0xac, 0x3c, 0xf6, 0xe5,
	0x7b, 0x6d, 0x44, 0xf7, 0x0f, 0xed, 0x5a, 0x0b, 0x77, 0x8c, 0xe8, 0x60, 0x0f, 0xd2, 0x1e, 0x0e,
	0x0e, 0x8c, 0x4b, 0xfd, 0x88, 0x1e, 0xf9, 0x90, 0xd8, 0x13, 0xec, 0xe7, 0xf6, 0xfb, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x07, 0xec, 0x1a, 0x21, 0x20, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// NewBlockHashs adds new bitcoin block hashes
	// the block hashes are not only for deposit/withdrawal spv, but also a
	// on-chain oracle for dapps
	// ** it requires off-chain vote by relayer group
	// ** the block should have a hard confirmation number which inconsistent with
	// the param.
	// ** every block after startBlockNumber in the geneis should be submitted on
	// chain
	NewBlockHashes(ctx context.Context, in *MsgNewBlockHashes, opts ...grpc.CallOption) (*MsgNewBlockHashesResponse, error)
	// NewDeposit adds new deposits
	// ** it doesn't need off-chain vote process since we have spv
	NewDeposits(ctx context.Context, in *MsgNewDeposits, opts ...grpc.CallOption) (*MsgNewDepositsResponse, error)
	// NewPubkey adds new deposit public key
	// ** it requires off-chain vote by relayer group
	NewPubkey(ctx context.Context, in *MsgNewPubkey, opts ...grpc.CallOption) (*MsgNewPubkeyResponse, error)
	// ProcessWithdrawal submits a non-signed raw tx and its vote for the
	// withdrawal requests. This is the first step to process withdrawals
	// ** it requires off-chain vote by relayer group
	// ** the output index and withdrawal id list are in one-to-one correspondence
	// ** the tx price should not be larger than withdrawal request
	//
	// It informs every voter that the proposal has been approved and they can
	// process signing then. The most relayer member can construct the final
	// signed transaction and submit the transaction to the bitcoin chain when the
	// signing process is finished Since the signing is an off chain process, so
	// relayer proposer doesn't need to submit the signed transaction to the chain
	ProcessWithdrawal(ctx context.Context, in *MsgProcessWithdrawal, opts ...grpc.CallOption) (*MsgProcessWithdrawalResponse, error)
	// ProcessWithdrawalV2, it's the same as ProcessWithdrawal, but it includes
	// the witness size
	ProcessWithdrawalV2(ctx context.Context, in *MsgProcessWithdrawalV2, opts ...grpc.CallOption) (*MsgProcessWithdrawalV2Response, error)
	// ReplaceWithdrawal replaces a withdrawal by increasing fee
	// ** the output for the withdrawal should be not changed, but you can change
	// the value
	// ** the new tx fee should be larger than before
	// ** it requires off-chain vote by relayer group
	ReplaceWithdrawal(ctx context.Context, in *MsgReplaceWithdrawal, opts ...grpc.CallOption) (*MsgReplaceWithdrawalResponse, error)
	// ReplaceWithdrawalV2, it's the same as ReplaceWithdrawal, but it includes
	// the witness size
	ReplaceWithdrawalV2(ctx context.Context, in *MsgReplaceWithdrawalV2, opts ...grpc.CallOption) (*MsgReplaceWithdrawalV2Response, error)
	// FinalizeWithdrawal finlizes withdrawals and informs the chain to create the
	// withdrawal receipts This is the final step to process withdrawals
	//
	// ** proposer should provide spv to prove the withdarwal is confirmed
	// ** it doesn't need off-chain vote process
	FinalizeWithdrawal(ctx context.Context, in *MsgFinalizeWithdrawal, opts ...grpc.CallOption) (*MsgFinalizeWithdrawalResponse, error)
	// ApproveCancellation approves cancellation requests
	ApproveCancellation(ctx context.Context, in *MsgApproveCancellation, opts ...grpc.CallOption) (*MsgApproveCancellationResponse, error)
	// NewConsolidation initializes a consolidation request to aggregate utxo set
	// ** it requires off-chain vote by relayer group
	NewConsolidation(ctx context.Context, in *MsgNewConsolidation, opts ...grpc.CallOption) (*MsgNewConsolidationResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewBlockHashes(ctx context.Context, in *MsgNewBlockHashes, opts ...grpc.CallOption) (*MsgNewBlockHashesResponse, error) {
	out := new(MsgNewBlockHashesResponse)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/NewBlockHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewDeposits(ctx context.Context, in *MsgNewDeposits, opts ...grpc.CallOption) (*MsgNewDepositsResponse, error) {
	out := new(MsgNewDepositsResponse)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/NewDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewPubkey(ctx context.Context, in *MsgNewPubkey, opts ...grpc.CallOption) (*MsgNewPubkeyResponse, error) {
	out := new(MsgNewPubkeyResponse)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/NewPubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProcessWithdrawal(ctx context.Context, in *MsgProcessWithdrawal, opts ...grpc.CallOption) (*MsgProcessWithdrawalResponse, error) {
	out := new(MsgProcessWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/ProcessWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProcessWithdrawalV2(ctx context.Context, in *MsgProcessWithdrawalV2, opts ...grpc.CallOption) (*MsgProcessWithdrawalV2Response, error) {
	out := new(MsgProcessWithdrawalV2Response)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/ProcessWithdrawalV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplaceWithdrawal(ctx context.Context, in *MsgReplaceWithdrawal, opts ...grpc.CallOption) (*MsgReplaceWithdrawalResponse, error) {
	out := new(MsgReplaceWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/ReplaceWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplaceWithdrawalV2(ctx context.Context, in *MsgReplaceWithdrawalV2, opts ...grpc.CallOption) (*MsgReplaceWithdrawalV2Response, error) {
	out := new(MsgReplaceWithdrawalV2Response)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/ReplaceWithdrawalV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinalizeWithdrawal(ctx context.Context, in *MsgFinalizeWithdrawal, opts ...grpc.CallOption) (*MsgFinalizeWithdrawalResponse, error) {
	out := new(MsgFinalizeWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/FinalizeWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveCancellation(ctx context.Context, in *MsgApproveCancellation, opts ...grpc.CallOption) (*MsgApproveCancellationResponse, error) {
	out := new(MsgApproveCancellationResponse)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/ApproveCancellation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewConsolidation(ctx context.Context, in *MsgNewConsolidation, opts ...grpc.CallOption) (*MsgNewConsolidationResponse, error) {
	out := new(MsgNewConsolidationResponse)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/NewConsolidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// NewBlockHashs adds new bitcoin block hashes
	// the block hashes are not only for deposit/withdrawal spv, but also a
	// on-chain oracle for dapps
	// ** it requires off-chain vote by relayer group
	// ** the block should have a hard confirmation number which inconsistent with
	// the param.
	// ** every block after startBlockNumber in the geneis should be submitted on
	// chain
	NewBlockHashes(context.Context, *MsgNewBlockHashes) (*MsgNewBlockHashesResponse, error)
	// NewDeposit adds new deposits
	// ** it doesn't need off-chain vote process since we have spv
	NewDeposits(context.Context, *MsgNewDeposits) (*MsgNewDepositsResponse, error)
	// NewPubkey adds new deposit public key
	// ** it requires off-chain vote by relayer group
	NewPubkey(context.Context, *MsgNewPubkey) (*MsgNewPubkeyResponse, error)
	// ProcessWithdrawal submits a non-signed raw tx and its vote for the
	// withdrawal requests. This is the first step to process withdrawals
	// ** it requires off-chain vote by relayer group
	// ** the output index and withdrawal id list are in one-to-one correspondence
	// ** the tx price should not be larger than withdrawal request
	//
	// It informs every voter that the proposal has been approved and they can
	// process signing then. The most relayer member can construct the final
	// signed transaction and submit the transaction to the bitcoin chain when the
	// signing process is finished Since the signing is an off chain process, so
	// relayer proposer doesn't need to submit the signed transaction to the chain
	ProcessWithdrawal(context.Context, *MsgProcessWithdrawal) (*MsgProcessWithdrawalResponse, error)
	// ProcessWithdrawalV2, it's the same as ProcessWithdrawal, but it includes
	// the witness size
	ProcessWithdrawalV2(context.Context, *MsgProcessWithdrawalV2) (*MsgProcessWithdrawalV2Response, error)
	// ReplaceWithdrawal replaces a withdrawal by increasing fee
	// ** the output for the withdrawal should be not changed, but you can change
	// the value
	// ** the new tx fee should be larger than before
	// ** it requires off-chain vote by relayer group
	ReplaceWithdrawal(context.Context, *MsgReplaceWithdrawal) (*MsgReplaceWithdrawalResponse, error)
	// ReplaceWithdrawalV2, it's the same as ReplaceWithdrawal, but it includes
	// the witness size
	ReplaceWithdrawalV2(context.Context, *MsgReplaceWithdrawalV2) (*MsgReplaceWithdrawalV2Response, error)
	// FinalizeWithdrawal finlizes withdrawals and informs the chain to create the
	// withdrawal receipts This is the final step to process withdrawals
	//
	// ** proposer should provide spv to prove the withdarwal is confirmed
	// ** it doesn't need off-chain vote process
	FinalizeWithdrawal(context.Context, *MsgFinalizeWithdrawal) (*MsgFinalizeWithdrawalResponse, error)
	// ApproveCancellation approves cancellation requests
	ApproveCancellation(context.Context, *MsgApproveCancellation) (*MsgApproveCancellationResponse, error)
	// NewConsolidation initializes a consolidation request to aggregate utxo set
	// ** it requires off-chain vote by relayer group
	NewConsolidation(context.Context, *MsgNewConsolidation) (*MsgNewConsolidationResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) NewBlockHashes(ctx context.Context, req *MsgNewBlockHashes) (*MsgNewBlockHashesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBlockHashes not implemented")
}
func (*UnimplementedMsgServer) NewDeposits(ctx context.Context, req *MsgNewDeposits) (*MsgNewDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDeposits not implemented")
}
func (*UnimplementedMsgServer) NewPubkey(ctx context.Context, req *MsgNewPubkey) (*MsgNewPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPubkey not implemented")
}
func (*UnimplementedMsgServer) ProcessWithdrawal(ctx context.Context, req *MsgProcessWithdrawal) (*MsgProcessWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWithdrawal not implemented")
}
func (*UnimplementedMsgServer) ProcessWithdrawalV2(ctx context.Context, req *MsgProcessWithdrawalV2) (*MsgProcessWithdrawalV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWithdrawalV2 not implemented")
}
func (*UnimplementedMsgServer) ReplaceWithdrawal(ctx context.Context, req *MsgReplaceWithdrawal) (*MsgReplaceWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceWithdrawal not implemented")
}
func (*UnimplementedMsgServer) ReplaceWithdrawalV2(ctx context.Context, req *MsgReplaceWithdrawalV2) (*MsgReplaceWithdrawalV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceWithdrawalV2 not implemented")
}
func (*UnimplementedMsgServer) FinalizeWithdrawal(ctx context.Context, req *MsgFinalizeWithdrawal) (*MsgFinalizeWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeWithdrawal not implemented")
}
func (*UnimplementedMsgServer) ApproveCancellation(ctx context.Context, req *MsgApproveCancellation) (*MsgApproveCancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveCancellation not implemented")
}
func (*UnimplementedMsgServer) NewConsolidation(ctx context.Context, req *MsgNewConsolidation) (*MsgNewConsolidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewConsolidation not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_NewBlockHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewBlockHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewBlockHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/NewBlockHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewBlockHashes(ctx, req.(*MsgNewBlockHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewDeposits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/NewDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewDeposits(ctx, req.(*MsgNewDeposits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewPubkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/NewPubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewPubkey(ctx, req.(*MsgNewPubkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProcessWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessWithdrawal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProcessWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/ProcessWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProcessWithdrawal(ctx, req.(*MsgProcessWithdrawal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProcessWithdrawalV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessWithdrawalV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProcessWithdrawalV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/ProcessWithdrawalV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProcessWithdrawalV2(ctx, req.(*MsgProcessWithdrawalV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplaceWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplaceWithdrawal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplaceWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/ReplaceWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplaceWithdrawal(ctx, req.(*MsgReplaceWithdrawal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplaceWithdrawalV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplaceWithdrawalV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplaceWithdrawalV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/ReplaceWithdrawalV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplaceWithdrawalV2(ctx, req.(*MsgReplaceWithdrawalV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinalizeWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinalizeWithdrawal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinalizeWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/FinalizeWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinalizeWithdrawal(ctx, req.(*MsgFinalizeWithdrawal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveCancellation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/ApproveCancellation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveCancellation(ctx, req.(*MsgApproveCancellation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewConsolidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewConsolidation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewConsolidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/NewConsolidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewConsolidation(ctx, req.(*MsgNewConsolidation))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goat.bitcoin.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewBlockHashes",
			Handler:    _Msg_NewBlockHashes_Handler,
		},
		{
			MethodName: "NewDeposits",
			Handler:    _Msg_NewDeposits_Handler,
		},
		{
			MethodName: "NewPubkey",
			Handler:    _Msg_NewPubkey_Handler,
		},
		{
			MethodName: "ProcessWithdrawal",
			Handler:    _Msg_ProcessWithdrawal_Handler,
		},
		{
			MethodName: "ProcessWithdrawalV2",
			Handler:    _Msg_ProcessWithdrawalV2_Handler,
		},
		{
			MethodName: "ReplaceWithdrawal",
			Handler:    _Msg_ReplaceWithdrawal_Handler,
		},
		{
			MethodName: "ReplaceWithdrawalV2",
			Handler:    _Msg_ReplaceWithdrawalV2_Handler,
		},
		{
			MethodName: "FinalizeWithdrawal",
			Handler:    _Msg_FinalizeWithdrawal_Handler,
		},
		{
			MethodName: "ApproveCancellation",
			Handler:    _Msg_ApproveCancellation_Handler,
		},
		{
			MethodName: "NewConsolidation",
			Handler:    _Msg_NewConsolidation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goat/bitcoin/v1/tx.proto",
}

func (m *MsgNewBlockHashes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBlockHashes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBlockHashes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		for iNdEx := len(m.BlockHash) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockHash[iNdEx])
			copy(dAtA[i:], m.BlockHash[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHash[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.StartBlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartBlockNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewBlockHashesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBlockHashesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBlockHashesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNewDeposits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewDeposits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewDeposits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BlockHeaders) > 0 {
		for iNdEx := len(m.BlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNewPubkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewPubkey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewPubkey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewPubkeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewPubkeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewPubkeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProcessWithdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessWithdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessWithdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TxFee))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NoWitnessTx) > 0 {
		i -= len(m.NoWitnessTx)
		copy(dAtA[i:], m.NoWitnessTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoWitnessTx)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		dAtA5 := make([]byte, len(m.Id)*10)
		var j4 int
		for _, num := range m.Id {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintTx(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1a
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProcessWithdrawalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessWithdrawalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessWithdrawalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProcessWithdrawalV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessWithdrawalV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessWithdrawalV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WitnessSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WitnessSize))
		i--
		dAtA[i] = 0x30
	}
	if m.TxFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TxFee))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NoWitnessTx) > 0 {
		i -= len(m.NoWitnessTx)
		copy(dAtA[i:], m.NoWitnessTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoWitnessTx)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		dAtA8 := make([]byte, len(m.Id)*10)
		var j7 int
		for _, num := range m.Id {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTx(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x1a
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProcessWithdrawalV2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessWithdrawalV2Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessWithdrawalV2Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReplaceWithdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceWithdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceWithdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewTxFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewTxFee))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NewNoWitnessTx) > 0 {
		i -= len(m.NewNoWitnessTx)
		copy(dAtA[i:], m.NewNoWitnessTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewNoWitnessTx)))
		i--
		dAtA[i] = 0x22
	}
	if m.Pid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x18
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReplaceWithdrawalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceWithdrawalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceWithdrawalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReplaceWithdrawalV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceWithdrawalV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceWithdrawalV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WitnessSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WitnessSize))
		i--
		dAtA[i] = 0x30
	}
	if m.NewTxFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewTxFee))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NewNoWitnessTx) > 0 {
		i -= len(m.NewNoWitnessTx)
		copy(dAtA[i:], m.NewNoWitnessTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewNoWitnessTx)))
		i--
		dAtA[i] = 0x22
	}
	if m.Pid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x18
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReplaceWithdrawalV2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceWithdrawalV2Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceWithdrawalV2Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFinalizeWithdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizeWithdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizeWithdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHeader) > 0 {
		i -= len(m.BlockHeader)
		copy(dAtA[i:], m.BlockHeader)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHeader)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.IntermediateProof) > 0 {
		i -= len(m.IntermediateProof)
		copy(dAtA[i:], m.IntermediateProof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IntermediateProof)))
		i--
		dAtA[i] = 0x32
	}
	if m.TxIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinalizeWithdrawalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizeWithdrawalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizeWithdrawalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgApproveCancellation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveCancellation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveCancellation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA13 := make([]byte, len(m.Id)*10)
		var j12 int
		for _, num := range m.Id {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintTx(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveCancellationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveCancellationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveCancellationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNewConsolidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewConsolidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewConsolidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NoWitnessTx) > 0 {
		i -= len(m.NoWitnessTx)
		copy(dAtA[i:], m.NoWitnessTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoWitnessTx)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewConsolidationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewConsolidationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewConsolidationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNewBlockHashes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartBlockNumber != 0 {
		n += 1 + sovTx(uint64(m.StartBlockNumber))
	}
	if len(m.BlockHash) > 0 {
		for _, b := range m.BlockHash {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgNewBlockHashesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNewDeposits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BlockHeaders) > 0 {
		for _, e := range m.BlockHeaders {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgNewDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNewPubkey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewPubkeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProcessWithdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	l = len(m.NoWitnessTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TxFee != 0 {
		n += 1 + sovTx(uint64(m.TxFee))
	}
	return n
}

func (m *MsgProcessWithdrawalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProcessWithdrawalV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	l = len(m.NoWitnessTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TxFee != 0 {
		n += 1 + sovTx(uint64(m.TxFee))
	}
	if m.WitnessSize != 0 {
		n += 1 + sovTx(uint64(m.WitnessSize))
	}
	return n
}

func (m *MsgProcessWithdrawalV2Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReplaceWithdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pid != 0 {
		n += 1 + sovTx(uint64(m.Pid))
	}
	l = len(m.NewNoWitnessTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewTxFee != 0 {
		n += 1 + sovTx(uint64(m.NewTxFee))
	}
	return n
}

func (m *MsgReplaceWithdrawalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReplaceWithdrawalV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pid != 0 {
		n += 1 + sovTx(uint64(m.Pid))
	}
	l = len(m.NewNoWitnessTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewTxFee != 0 {
		n += 1 + sovTx(uint64(m.NewTxFee))
	}
	if m.WitnessSize != 0 {
		n += 1 + sovTx(uint64(m.WitnessSize))
	}
	return n
}

func (m *MsgReplaceWithdrawalV2Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFinalizeWithdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pid != 0 {
		n += 1 + sovTx(uint64(m.Pid))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.BlockNumber))
	}
	if m.TxIndex != 0 {
		n += 1 + sovTx(uint64(m.TxIndex))
	}
	l = len(m.IntermediateProof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BlockHeader)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFinalizeWithdrawalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgApproveCancellation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgApproveCancellationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNewConsolidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoWitnessTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewConsolidationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNewBlockHashes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBlockHashes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBlockHashes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Votes{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockNumber", wireType)
			}
			m.StartBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash, make([]byte, postIndex-iNdEx))
			copy(m.BlockHash[len(m.BlockHash)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewBlockHashesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBlockHashesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBlockHashesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewDeposits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewDeposits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewDeposits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeaders = append(m.BlockHeaders, &BlockHeader{})
			if err := m.BlockHeaders[len(m.BlockHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, &Deposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewPubkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewPubkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewPubkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Votes{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.PublicKey{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewPubkeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewPubkeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewPubkeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessWithdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessWithdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessWithdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Votes{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWitnessTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoWitnessTx = append(m.NoWitnessTx[:0], dAtA[iNdEx:postIndex]...)
			if m.NoWitnessTx == nil {
				m.NoWitnessTx = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFee", wireType)
			}
			m.TxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessWithdrawalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessWithdrawalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessWithdrawalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessWithdrawalV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessWithdrawalV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessWithdrawalV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Votes{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWitnessTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoWitnessTx = append(m.NoWitnessTx[:0], dAtA[iNdEx:postIndex]...)
			if m.NoWitnessTx == nil {
				m.NoWitnessTx = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFee", wireType)
			}
			m.TxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessSize", wireType)
			}
			m.WitnessSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WitnessSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessWithdrawalV2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessWithdrawalV2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessWithdrawalV2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceWithdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceWithdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceWithdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Votes{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNoWitnessTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewNoWitnessTx = append(m.NewNoWitnessTx[:0], dAtA[iNdEx:postIndex]...)
			if m.NewNoWitnessTx == nil {
				m.NewNoWitnessTx = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTxFee", wireType)
			}
			m.NewTxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceWithdrawalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceWithdrawalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceWithdrawalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceWithdrawalV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceWithdrawalV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceWithdrawalV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Votes{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNoWitnessTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewNoWitnessTx = append(m.NewNoWitnessTx[:0], dAtA[iNdEx:postIndex]...)
			if m.NewNoWitnessTx == nil {
				m.NewNoWitnessTx = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTxFee", wireType)
			}
			m.NewTxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessSize", wireType)
			}
			m.WitnessSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WitnessSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceWithdrawalV2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceWithdrawalV2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceWithdrawalV2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizeWithdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizeWithdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizeWithdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = append(m.Txid[:0], dAtA[iNdEx:postIndex]...)
			if m.Txid == nil {
				m.Txid = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntermediateProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntermediateProof = append(m.IntermediateProof[:0], dAtA[iNdEx:postIndex]...)
			if m.IntermediateProof == nil {
				m.IntermediateProof = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeader = append(m.BlockHeader[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHeader == nil {
				m.BlockHeader = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizeWithdrawalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizeWithdrawalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizeWithdrawalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveCancellation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveCancellation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveCancellation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveCancellationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveCancellationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveCancellationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewConsolidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewConsolidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewConsolidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWitnessTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoWitnessTx = append(m.NoWitnessTx[:0], dAtA[iNdEx:postIndex]...)
			if m.NoWitnessTx == nil {
				m.NoWitnessTx = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Votes{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewConsolidationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewConsolidationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewConsolidationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
