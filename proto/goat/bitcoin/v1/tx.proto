syntax = "proto3";
package goat.bitcoin.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "goat/bitcoin/v1/bitcoin.proto";
import "goat/relayer/v1/relayer.proto";

option go_package = "github.com/goatnetwork/goat/x/bitcoin/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // NewBlockHashes adds new bitcoin block hashes
  // the block hashes are not only for deposit/withdrawal spv, but also a
  // on-chain oracle for dapps
  // ** it requires off-chain vote by relayer group
  // ** the block should have a hard confirmation number which incosistent with
  // the param.
  // ** every block after startBlockNumber in the geneis should be submitted on
  // chain
  rpc NewBlockHashes(MsgNewBlockHashes) returns (MsgNewBlockHashesResponse);

  // NewDeposits adds new deposits
  // ** it doesn't need off-chain vote process since we have spv
  rpc NewDeposits(MsgNewDeposits) returns (MsgNewDepositsResponse);

  // NewPubkey adds new deposit public key
  // ** it requires off-chain vote by relayer group
  rpc NewPubkey(MsgNewPubkey) returns (MsgNewPubkeyResponse);

  // ProcessWithdrawal submits a non-signed raw tx and its vote for the
  // withdrawal requests. This is the first step to process withdrawals
  // ** it requires off-chain vote by relayer group
  // ** the output index and withdrawal id list are in one-to-one correspondence
  // ** the tx price should not be larger than withdrawal request
  //
  // It informs every voter that the proposal has been approved and they can
  // process signing then. The most relayer member can construct the final
  // signed transaction and submit the transaction to the bitcoin chain when the
  // signing process is finished Since the signing is an off chain process, so
  // relayer proposer doesn't need to submit the signed transaction to the chain
  rpc ProcessWithdrawal(MsgProcessWithdrawal) returns (MsgProcessWithdrawalResponse);

  // ProcessWithdrawalV2, it's the same as ProcessWithdrawal, but it includes
  // the witness size
  rpc ProcessWithdrawalV2(MsgProcessWithdrawalV2) returns (MsgProcessWithdrawalV2Response);

  // ReplaceWithdrawal replaces a withdrawal by increasing fee
  // ** the output for the withdrawal should be not changed, but you can change
  // the value
  // ** the new tx fee should be larger than before
  // ** it requires off-chain vote by relayer group
  rpc ReplaceWithdrawal(MsgReplaceWithdrawal) returns (MsgReplaceWithdrawalResponse);

  // ReplaceWithdrawalV2, it's the same as ReplaceWithdrawal, but it includes
  // the witness size
  rpc ReplaceWithdrawalV2(MsgReplaceWithdrawalV2) returns (MsgReplaceWithdrawalV2Response);

  // FinalizeWithdrawal finlizes withdrawals and informs the chain to create the
  // withdrawal receipts This is the final step to process withdrawals
  //
  // ** proposer should provide spv to prove the withdarwal is confirmed
  // ** it doesn't need off-chain vote process
  rpc FinalizeWithdrawal(MsgFinalizeWithdrawal) returns (MsgFinalizeWithdrawalResponse);

  // ApproveCancellation approves cancelation requests
  rpc ApproveCancellation(MsgApproveCancellation) returns (MsgApproveCancellationResponse);

  // NewConsolidation initializes a consolidation request to aggregate utxo set
  // ** it requires off-chain vote by relayer group
  rpc NewConsolidation(MsgNewConsolidation) returns (MsgNewConsolidationResponse);
}

// MsgNewBlockHashes represents a solid block header is confirmed by relayer
// group
message MsgNewBlockHashes {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "goat/x/bitcoin/MsgNewBlockHashes";

  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  goat.relayer.v1.Votes vote = 2;
  uint64 start_block_number = 3;
  repeated bytes block_hash = 4;
}

// MsgNewBlockHashesResponse defines the Msg/NewHeaders response type.
message MsgNewBlockHashesResponse {}

// MsgNewDeposits represents new deposits
message MsgNewDeposits {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "goat/x/bitcoin/MsgNewDeposits";

  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // block_headers is an array which includes a height and raw header pair
  // the raw block header is always 80 bytes
  // https://github.com/btcsuite/btcd/blob/24eb815168f49dea84767817717a11bd7928eb23/wire/blockheader.go#L65
  repeated BlockHeader block_headers = 2;
  repeated Deposit deposits = 3;
}

// MsgNewDepositsResponse defines the Msg/NewDeposits response type.
message MsgNewDepositsResponse {}

// MsgNewPubkey is the Msg/NewPubkey request type.
message MsgNewPubkey {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "goat/x/bitcoin/MsgNewPubkey";

  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  goat.relayer.v1.Votes vote = 2;
  goat.relayer.v1.PublicKey pubkey = 3;
}

// MsgNewPubkeyResponse is the Msg/NewPubkey response type.
message MsgNewPubkeyResponse {}

// MsgProcessWithdrawal
message MsgProcessWithdrawal {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "goat/x/bitcoin/MsgProcessWithdrawal";

  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  goat.relayer.v1.Votes vote = 2;
  // the withdraw id list
  repeated uint64 id = 3;
  bytes no_witness_tx = 4;
  // tx fee in satoshi
  uint64 tx_fee = 5;
}

// MsgProcessWithdrawalResponse
message MsgProcessWithdrawalResponse {}

// MsgProcessWithdrawal
message MsgProcessWithdrawalV2 {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "goat/x/bitcoin/MsgProcessWithdrawalV2";

  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  goat.relayer.v1.Votes vote = 2;
  // the withdraw id list
  repeated uint64 id = 3;
  bytes no_witness_tx = 4;
  // tx fee in satoshi
  uint64 tx_fee = 5;
  // witness size in bytes
  uint64 witness_size = 6;
}

// MsgProcessWithdrawalV2Response
message MsgProcessWithdrawalV2Response {}

// MsgReplaceWithdrawal
message MsgReplaceWithdrawal {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "goat/x/bitcoin/MsgReplaceWithdrawal";

  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  goat.relayer.v1.Votes vote = 2;
  // the process id of the withdrawals to replace
  uint64 pid = 3;
  // the new tx for the withdrawal proposal
  bytes new_no_witness_tx = 4;
  // tx fee in satoshi
  uint64 new_tx_fee = 5;
}

// MsgReplaceWithdrawalResponse
message MsgReplaceWithdrawalResponse {}

// MsgReplaceWithdrawal
message MsgReplaceWithdrawalV2 {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "goat/x/bitcoin/MsgReplaceWithdrawalV2";

  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  goat.relayer.v1.Votes vote = 2;
  // the process id of the withdrawals to replace
  uint64 pid = 3;
  // the new tx for the withdrawal proposal
  bytes new_no_witness_tx = 4;
  // tx fee in satoshi
  uint64 new_tx_fee = 5;
  // witness size in bytes
  uint64 witness_size = 6;
}

// MsgReplaceWithdrawalV2Response
message MsgReplaceWithdrawalV2Response {}

// MsgFinalizeWithdrawal
message MsgFinalizeWithdrawal {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "goat/x/bitcoin/MsgFinalizeWithdrawal";

  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // the process id of the withdrawals to finalize
  uint64 pid = 2;
  // the final confirmed txid for the withdrawal proposal
  bytes txid = 3;
  // block_number the block number that transaction located at
  uint64 block_number = 4;
  // tx_index is the index of transaction in the block
  uint32 tx_index = 5;
  // intermediate proof is the proof without the txid and merkel root
  bytes intermediate_proof = 6;
  // block_header is the raw bitcoin block header bytes
  bytes block_header = 7;
}

// MsgFinalizeWithdrawalResponse
message MsgFinalizeWithdrawalResponse {}

// MsgApproveCancellation
message MsgApproveCancellation {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "goat/x/bitcoin/MsgApproveCancellation";

  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated uint64 id = 2;
}

// MsgApproveCancellationResponse
message MsgApproveCancellationResponse {}

// MsgNewConsolidation
message MsgNewConsolidation {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "goat/x/bitcoin/MsgNewConsolidation";

  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bytes no_witness_tx = 2;
  goat.relayer.v1.Votes vote = 3;
}

// MsgNewConsolidationResponse
message MsgNewConsolidationResponse {}
