// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ethrpc/interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/ethrpc/interface.go -destination=testutil/mock/eth_engine_client.go -package=mock EngineClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	engine "github.com/ethereum/go-ethereum/beacon/engine"
	common "github.com/ethereum/go-ethereum/common"
	params "github.com/ethereum/go-ethereum/params"
	gomock "go.uber.org/mock/gomock"
)

// MockEngineClient is a mock of EngineClient interface.
type MockEngineClient struct {
	ctrl     *gomock.Controller
	recorder *MockEngineClientMockRecorder
	isgomock struct{}
}

// MockEngineClientMockRecorder is the mock recorder for MockEngineClient.
type MockEngineClientMockRecorder struct {
	mock *MockEngineClient
}

// NewMockEngineClient creates a new mock instance.
func NewMockEngineClient(ctrl *gomock.Controller) *MockEngineClient {
	mock := &MockEngineClient{ctrl: ctrl}
	mock.recorder = &MockEngineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngineClient) EXPECT() *MockEngineClientMockRecorder {
	return m.recorder
}

// ExchangeCapabilities mocks base method.
func (m *MockEngineClient) ExchangeCapabilities(ctx context.Context, caps []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCapabilities", ctx, caps)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCapabilities indicates an expected call of ExchangeCapabilities.
func (mr *MockEngineClientMockRecorder) ExchangeCapabilities(ctx, caps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCapabilities", reflect.TypeOf((*MockEngineClient)(nil).ExchangeCapabilities), ctx, caps)
}

// ForkchoiceUpdatedV3 mocks base method.
func (m *MockEngineClient) ForkchoiceUpdatedV3(ctx context.Context, update *engine.ForkchoiceStateV1, params *engine.PayloadAttributes) (engine.ForkChoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForkchoiceUpdatedV3", ctx, update, params)
	ret0, _ := ret[0].(engine.ForkChoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForkchoiceUpdatedV3 indicates an expected call of ForkchoiceUpdatedV3.
func (mr *MockEngineClientMockRecorder) ForkchoiceUpdatedV3(ctx, update, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkchoiceUpdatedV3", reflect.TypeOf((*MockEngineClient)(nil).ForkchoiceUpdatedV3), ctx, update, params)
}

// GetChainConfig mocks base method.
func (m *MockEngineClient) GetChainConfig(ctx context.Context) (*params.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfig", ctx)
	ret0, _ := ret[0].(*params.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfig indicates an expected call of GetChainConfig.
func (mr *MockEngineClientMockRecorder) GetChainConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfig", reflect.TypeOf((*MockEngineClient)(nil).GetChainConfig), ctx)
}

// GetClientVersionV1 mocks base method.
func (m *MockEngineClient) GetClientVersionV1(ctx context.Context, info engine.ClientVersionV1) ([]engine.ClientVersionV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientVersionV1", ctx, info)
	ret0, _ := ret[0].([]engine.ClientVersionV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientVersionV1 indicates an expected call of GetClientVersionV1.
func (mr *MockEngineClientMockRecorder) GetClientVersionV1(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientVersionV1", reflect.TypeOf((*MockEngineClient)(nil).GetClientVersionV1), ctx, info)
}

// GetFullPayload mocks base method.
func (m *MockEngineClient) GetFullPayload(ctx context.Context, payloadID engine.PayloadID) (*engine.ExecutionPayloadEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullPayload", ctx, payloadID)
	ret0, _ := ret[0].(*engine.ExecutionPayloadEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullPayload indicates an expected call of GetFullPayload.
func (mr *MockEngineClientMockRecorder) GetFullPayload(ctx, payloadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullPayload", reflect.TypeOf((*MockEngineClient)(nil).GetFullPayload), ctx, payloadID)
}

// GetPayloadV4 mocks base method.
func (m *MockEngineClient) GetPayloadV4(ctx context.Context, payloadID engine.PayloadID) (*engine.ExecutionPayloadEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayloadV4", ctx, payloadID)
	ret0, _ := ret[0].(*engine.ExecutionPayloadEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayloadV4 indicates an expected call of GetPayloadV4.
func (mr *MockEngineClientMockRecorder) GetPayloadV4(ctx, payloadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayloadV4", reflect.TypeOf((*MockEngineClient)(nil).GetPayloadV4), ctx, payloadID)
}

// NewPayloadV4 mocks base method.
func (m *MockEngineClient) NewPayloadV4(ctx context.Context, params *engine.ExecutableData, versionedHashes []common.Hash, beaconRoot common.Hash, requests [][]byte) (*engine.PayloadStatusV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPayloadV4", ctx, params, versionedHashes, beaconRoot, requests)
	ret0, _ := ret[0].(*engine.PayloadStatusV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPayloadV4 indicates an expected call of NewPayloadV4.
func (mr *MockEngineClientMockRecorder) NewPayloadV4(ctx, params, versionedHashes, beaconRoot, requests any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPayloadV4", reflect.TypeOf((*MockEngineClient)(nil).NewPayloadV4), ctx, params, versionedHashes, beaconRoot, requests)
}
